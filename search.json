[{"title":"onedrive - not just cloud drive","url":"/post/71ae5435.html","content":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><p>很多时候，一些问题与想法，必须要有多个设备的背景。</p>\n<hr>\n<span id=\"more\"></span>\n\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>​\t\t通过两台电脑的日常使用思考，展现OneDrive这一同步利器，以及OneDrive的理念与意义。</p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>​\t\t三月份由于一些原因，入手了一个主机，原来的笔记本一下子变成了键盘托，想起之前觉得30块钱的键盘托有些贵，如今用大几千的笔记本当键盘托确实有些好笑。</p>\n<p>​\t\tAngway，同步的问题刚开始显得不是那么重要，因为使用场景固定。无非是一些大文件的拷贝，这时用一个硬盘，就能轻松解决，而且300MB的顺序读写速度也让每次借硬盘、插线显得不是那么费劲。随后便在主机上舒舒服服地用了一段时间。</p>\n<p>​\t\t后来，由于地区解封的原因，需要隔离，而隔离7天，或许就只能用我的笔记本了。</p>\n<p>​\t\t但是我几个月来的工作文件基本都在主机上，如何同步，成了一个难题。</p>\n<p>​\t\t我不想直接把文件拷到U盘然后传到笔记本上，感觉这样有些原始……</p>\n<p>​\t\t也不想传到网盘里，因为要么某些太慢，要么感觉每次打开客户端太麻烦……</p>\n<p>​\t\t我想要做的，是等我换回主机工作的时候，如何避免再重复一遍文件同步的工作，也想避免以后每次在两台设备或者更多台更换时，我都要记得这段时间内在当前电脑上的修改，然后用网盘或者U盘的方式传文件。因为使用场景比较灵活，也不可能部署一个NAS系统存文件(太贵加没有地方放)，对于一些软件来讲，没有必要把软件本体都同步，软件在电脑上变动还是相对较小的，主要是文件。</p>\n<p>​\t\t我的理想目标是，能够像Git一样，有一个版本控制的功能，让我能够在多个客户端修改，之后每次修改完，能够通过一些指令(或者完全自动)比如git push传到某个云服务器上，然后更换设备时，只需要像git pull一样再从云端拉取下来，这样两台设备就可以无缝切换。</p>\n<h4 id=\"OneDrive-来了\"><a href=\"#OneDrive-来了\" class=\"headerlink\" title=\"OneDrive 来了\"></a>OneDrive 来了</h4><p>​\t\t之前也一直有用过OneDrive，毕竟是微软自家的，用着Windows想不注意都难。之前个人有个5G的免费空间，但是用的体验不太好，要么很容易满，然后提醒你升级到365；要么是本地写点文件时候，他就一直在同步，但我又不清楚到底哪些能够同步，哪些默认同步，导致一些莫名其妙的同步，占用那本就少得可怜的空间，整的人很不好。甚至于有次我同步了桌面后，桌面上所有东西都没了，然后通过“取消链接到此电脑”以及退出OneDrive，桌面上的东西才又回来……</p>\n<p>​\t\t想到了OneDrive，是因为它确实很不像一个云盘。国内的很多网盘，需要先在桌面找到客户端，然后双击，登录，可能还要收个验证码，此时又要拿出手机收短信或者扫码，然后看着网盘里的文件，思考位置在哪里(如果比较熟练也可以跳过这个步骤)，然后下载，然后到本地去查看，有时候可能下到C盘，还要找地方移动文件……</p>\n<p>​\t\t之前有搞过阿里云盘的本地挂载，虽然最后也不了了之，但是感觉OneDrive运用了这种思路。以下我个人认为的OneDrive的一些特点：</p>\n<ol>\n<li>它不需要一个很复杂花哨的客户端，也不需要每次登录的验证，借助微软账户就能开机自动登录，也就是说只要开了机，就能登录，因为用的是一个账户。</li>\n<li>OneDrive的文件既存在云上，也有本地，但是这种本地不像百度网盘这种，需要现打开客户端下载文件，而是自动同步。这有些类似于手机的自动同步功能，包括相册同步以及iCloud的同步。但感觉还有些不同：一个是手机相册很少有修改的场景，大多数是往里加加加照片；另一个是手机同步往往要打开客户端，有后台才能同步，但是手机这种工具以及使用场景来说，往往几周才打开一些冷门软件，所以同步也不及时。</li>\n<li>OneDrive几乎没有界面UI上的学习成本，它借助于微软Windows操作系统，直接内嵌在原本的文件系统内，就像是把云端的文件目录挂载到了本地，并且能够实时更新。只要见过微软的文件系统长什么样，用OneDrive完全不陌生。所以在UI上，就像是在浏览电脑本地上一个磁盘一样。对于具体文件，一般存到云中，等到下载下来，就还是存在本地磁盘。</li>\n<li>对于每个文件，都有三种情况，下载、始终保存、释放。文件目录会在各个设备上实时自动更新，一般情况下，文件既然是从电脑A上传的，那么肯定在电脑A上，同时电脑B的文件目录也会自动更新，这时带着电脑B出去，只需要双击这个文件，就能自动从云端下载，然后打开，就彷佛它本来就在电脑B中一样。</li>\n</ol>\n<h4 id=\"具体使用\"><a href=\"#具体使用\" class=\"headerlink\" title=\"具体使用\"></a>具体使用</h4><p>​\t\tOneDrive会在第一次登陆的时候让用户选择一个本地的路径，这就是自动同步的OneDrive文件夹，默认路径为“C:\\用户[用户名]”。除了这个，“桌面”“文档”与“图片”文件夹也是可以自动同步的，只不过用户可以手动选择。</p>\n<p>​\t\t一般地，将需要同步的文件或文件夹放入上述四个文件夹内，即可实现本地与OneDrive云端的文件同步。如果我们需要同步电脑中其它位置的文件或文件夹，可以将他们直接复制粘贴到上面四个文件夹内，但比较麻烦。因此，我们可以借助mklink 命令实现。（具体操作网络上有很多教程，此处不再赘述）</p>\n<p><code>mklink /d &quot;Link&quot; &quot;Target&quot;</code></p>\n<p>注意需要管理员权限。</p>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><p>​\t\t有了这些准备，我将本地的一些必要的文件夹都上传到了OneDrive中，几万个文件花了几个小时才传完。然后笔记本就能无缝衔接主机之前的工作，主机也能无缝衔接笔记本的工作。</p>\n<p>​\t\t不过还有另外一个很意外的惊喜：隔离期间用笔记本搭建了这个博客，回家后又开始使用主机，于是萌生了把博客文件夹也上传到OneDrive的想法。用笔记本把所有博客需要的文件都上传到OneDrive后，因为主机之前也装过nodejs和hexo，git这些软件，所以相当于文件和环境都有了。然后这时候再生成一个密钥，和GitHub认证一下，相当于主机本地密钥和GitHub也配对了，竟然可以直接在主机上写博客发布文章了！</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​\t\t不得不说，当有了多个设备后，同步的需求几乎是立刻就会产生。今日大谈OneDrive，绝无踩一捧一之意。实事求是来讲，多电脑同步的场景下，这种映射成为本地文件夹+自动同步确实很舒服。OneDrive也确实很适合个人在电脑上使用。</p>\n<p>​\t\t不过OneDrive确实也有很多问题，比如网络方面，以及它绝无法取代百度网盘，因为OneDrive并没有在国内构建起以社交网络为基础的共享生态，而百度网盘借助于微信小程序，成功渗透进了微信的社交网络中。即使OneDrive有共享功能，但是相比之下，可能大多数人还是更喜欢扫二维码吧，毕竟老板同事都在用百度网盘传文件，你又能做何选择呢？</p>\n","categories":["Geek"],"tags":["技术","OneDrive"]},{"title":"Navicat无法连接MySQL","url":"/post/32e06ea.html","content":"<h1 id=\"Navicat无法连接到MySQL数据库\"><a href=\"#Navicat无法连接到MySQL数据库\" class=\"headerlink\" title=\"Navicat无法连接到MySQL数据库\"></a>Navicat无法连接到MySQL数据库</h1><p>解决问题只需要一分钟，而发现问题则需要三小时。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"省流版：\"><a href=\"#省流版：\" class=\"headerlink\" title=\"省流版：\"></a>省流版：</h2><p>服务器没有开MySQL的端口。</p>\n<p>之所以还要写一篇文章，是因为开端口只需要一分钟，而根据各种现象与线索推断出没有开端口则需要三个小时。</p>\n<h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>在服务器上安装了Linux虚拟机，然后在虚拟机上安装MySQL。</p>\n<p>之前一直都是用xshell操纵MySQL，今天想使用Navicat连接。</p>\n<h2 id=\"my数据库\"><a href=\"#my数据库\" class=\"headerlink\" title=\"my数据库\"></a>my数据库</h2><p>MySQL的数据库如下：</p>\n<p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc5659dfe-f48f-4459-b7be-2d779ed5c70c%2FUntitled.png?table=block&id=a9a7fa21-6960-4bed-b8cd-2a85a11fe85e&spaceId=cd37e22d-bc20-4364-9838-fb09d9455024&width=2000\"></p>\n<p>共两个数据库，一个myDB1，一个university数据库（其余为MySQL自带的数据库）</p>\n<p>此时我MySQL里面的用户如图：</p>\n<p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F5b287113-20e3-499e-81d5-59722b6b7c20%2FUntitled.png?table=block&id=ff3d3505-8259-45e3-b47e-1e294c563cfb&spaceId=cd37e22d-bc20-4364-9838-fb09d9455024&width=2000\"></p>\n<p>可以看到里面有三个用户，root，peng和user_for_db1。其中user_for_db1是之前建立的，根据名字可知，为user_for_db1赋予了myDB1数据库的所有权限，同时为peng用户赋予所有数据库的所有访问权限。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>在Navicat中，建立了两个连接，如图：</p>\n<p>连接1：</p>\n<p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7a37ed44-bebf-4d38-b693-46977d58f8c4%2FUntitled.png?table=block&id=8a6b4130-bd23-4c55-ba1b-ed989a18c8d6&spaceId=cd37e22d-bc20-4364-9838-fb09d9455024&width=1230\"></p>\n<p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F15714710-cf21-4afb-bb78-627d7e56b638%2FUntitled.png?table=block&id=4dc00da1-10bb-4d7e-a015-4f0da4a7fa68&spaceId=cd37e22d-bc20-4364-9838-fb09d9455024&width=1230\"></p>\n<p>可以看到连接成功，并且由于设置了访问权限，所以只有myDB1一个数据库。这个连接是很久之前建立的，当时忘记怎么连接的了（果然还是要养成记录的好习惯）。</p>\n<p>但是当用另一个用户连接的时候，却提醒<strong>连接出错</strong>，如图：</p>\n<p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fb09dfa26-c0a4-46d9-b9bc-5d72d067e117%2FUntitled.png?table=block&id=90a62de4-8525-4412-b366-45cf76e70770&spaceId=cd37e22d-bc20-4364-9838-fb09d9455024&width=2000\"></p>\n<p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F433afe7e-5c47-4f58-8631-7a0c3af38bee%2FUntitled.png?table=block&id=453d6e96-5568-4986-8a68-3523f2b26b7d&spaceId=cd37e22d-bc20-4364-9838-fb09d9455024&width=2000\"></p>\n<p>另外也不是SSH连接的错误，因为都不行，这里只是没放截图。</p>\n<h2 id=\"请教大佬\"><a href=\"#请教大佬\" class=\"headerlink\" title=\"请教大佬\"></a>请教大佬</h2><p>在向大佬请教过程中，并没有直接问为什么连不上，因为很多背景会导致共同的问题，上来直接问往往讲不清背景。我先是注意到在XShell中，连接的端口是22，协议是SSH，而Navicat中的端口是3306，因此就先问了一下这两个端口的不同。</p>\n<p>大佬回答如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">22这个端口，是用SSH连接服务器的默认端口；</span><br><span class=\"line\">3306这个端口，是MySQL的默认端口。</span><br></pre></td></tr></table></figure>\n\n<p>当时还并没有十分清楚，大佬又来了一句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">3306可以改的</span><br><span class=\"line\">开启MySQL时候换个端口就行</span><br></pre></td></tr></table></figure>\n\n<p>听了这句话之后，我也排除了端口冲突的问题，因为这两个连接并没有同时打开。</p>\n<p>之后向大佬讲了一下背景，也就是上文的内容，大佬听完后，也是不太清楚。。。。</p>\n<h2 id=\"峰回路转\"><a href=\"#峰回路转\" class=\"headerlink\" title=\"峰回路转\"></a>峰回路转</h2><p>其实一开始就感觉这个问题有点奇怪，所以并没有很失望，不过看着大佬跟我说的那句：3306可以改的，我陷入了沉思。</p>\n<p>MySQL怎么知道你把端口改了呢？</p>\n<p>突然又想到最初设置服务器的时候，在安全组里面设置过一些端口</p>\n<p>于是问了一下大佬要不要在服务器上添加允许这个新端口</p>\n<p>果不其然，需要在服务器上设置。</p>\n<p>然后，就想着在服务器上添加一个新端口，尝试用新端口连接。</p>\n<p>然后震惊地发现，我没有给MySQL开端口！！</p>\n<p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fcadc8899-4cd3-4076-80c4-e3e7f16f14e0%2FUntitled.png?table=block&id=190f073f-a445-4388-9894-a0bd82f16227&spaceId=cd37e22d-bc20-4364-9838-fb09d9455024&width=1230\"></p>\n<p>发现这点后，我并没有立刻开放端口，而是开始思索，我之前怎么登录的呢？</p>\n<p>看着被允许的几个端口，尤其是<strong>22</strong>那个端口，事情逐渐明朗了起来</p>\n<p>我开了22的端口，而xshell也是用22连接的，也就是说，我用xshell连接，相当于是<strong>远程桌面</strong>。</p>\n<p>我是先通过22端口，连接到远程桌面，也就相当于登录到服务器这个计算机，然后在进入到mysql，这时的MySQL就相当于是远程计算机的本地应用了，所以不需要3306这个端口。</p>\n<p>但是我一开始怎么连接成功的呢？</p>\n<p>就是这个</p>\n<p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7a37ed44-bebf-4d38-b693-46977d58f8c4%2FUntitled.png?table=block&id=8a6b4130-bd23-4c55-ba1b-ed989a18c8d6&spaceId=cd37e22d-bc20-4364-9838-fb09d9455024&width=1230\"></p>\n<p>说实话想了好久也没想清楚，目前的推断是，在上图的安全组中（图7），有三个内网IP，有可能服务器认为我这个连接属于内网连接，所以可以通过（只是推测）。</p>\n<h2 id=\"收尾\"><a href=\"#收尾\" class=\"headerlink\" title=\"收尾\"></a>收尾</h2><p>开放端口后，确实连接成功了，但是发现没有任何数据库信息，于是通过网上查阅资料，知道是需要如下操作，简单记录一下：</p>\n<p>右键——编辑连接——数据库——选择对应的数据库（可能需要勾选使用自定义数据库列表）</p>\n<p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F76c93ef3-c8f6-4b72-aec7-e0b7c1f56533%2FUntitled.png?table=block&id=52f49902-8e18-4ce1-95d2-f79755247bcc&spaceId=cd37e22d-bc20-4364-9838-fb09d9455024&width=1230\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>通过这次的问题，我明白了端口的重要性，端口和IP地址一样都是用来标识计算机的，通过这些标识赋予不同计算机的访问权限。</li>\n<li>熟悉了一些关于用户与数据库授权的知识，只有授权后才能在Navicat中显示。</li>\n<li>进一步感受到了如何正确的问问题：<ul>\n<li>自己必须先尝试一些方案，不要遇到问题就直接问，先自己尝试解决。</li>\n<li>同时要将对方代入到你的场景中，描述清楚背景是成功的一半。</li>\n<li>在问的过程中，也要不断给出自己的思路，自己多加思考，因为没人有义务无偿且天然地向你解答。</li>\n<li>即使到最后，这个解决方案，包括添加新端口与两个端口的差别，都是我自己引导着大佬去解答的。大佬并没有直接给出方案（可能还是由于描述不清，到最后他才知道我之前是用xShell登录的），自己才是最清楚历史原因的人，一定要多思考。</li>\n</ul>\n</li>\n<li>添加一个端口只需要一分钟，但知道为什么添加，却需要三个小时。</li>\n</ul>\n","categories":["Geek"],"tags":["技术","mysql","数据库","navicat","Developer"]},{"title":"blogOasis的诞生","url":"/post/bc97fc50.html","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>说来惭愧，这是第4次搞博客了，前几次均以流产为终点。</p>\n<p>所幸这次应该是走运了，配置成功</p>\n<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><p>其中教程参考颇多，重点有以下几个，留作纪念：</p>\n<p><a href=\"https://www.cnblogs.com/zhouyu2017/p/6485265.html\">安装Node JS – Windows</a></p>\n<p><a href=\"https://www.cnblogs.com/mingyue5826/p/11141324.html\">安装Git以及配置SSH</a></p>\n<p>(注：对于上面的SSH的两个密钥，我是这么考虑的：本地生成能够一一对应的共有密钥和私有密钥，私有存在本地，公有放在Github上。等提交更改时，用本地的私有与Github的共有密钥去进行匹配，这样既方便的同时也更安全——不用每次输入密码，防止忘记密码，并且单看长度也比自己的密码安全多了)</p>\n<p>之后安装Hexo，在本地初始化文件夹存放博客，此处略过</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>其中由于之前有次安装博客但是夭折，遇到了一个历史遗留问题：</p>\n<p>存储库的访问被拒绝</p>\n<p><img src=\"C:\\Users\\voice\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220530230105921.png\" alt=\"image-20220530230105921\"></p>\n<p>因为我之前用另一个邮箱尝试建立过博客，这次用的新邮箱</p>\n<p>关于这个问题，网络上有很多说法，并且也都成功解决了，链接如下：</p>\n<p><a href=\"https://stackoverflow.com/questions/47465644/github-remote-permission-denied\">https://stackoverflow.com/questions/47465644/github-remote-permission-denied</a></p>\n<p><a href=\"https://blog.csdn.net/klxh2009/article/details/76019742\">https://blog.csdn.net/klxh2009/article/details/76019742</a></p>\n<p>我甚至重装了Git</p>\n<p>但是并不适合于我</p>\n<p>最后幸好有一位大佬相助，指出可能是https和ssh之间不能直接通用</p>\n<p>于是在config.yml的配置文件中，把最后deploy的repo部分由https改成了ssh的链接，最终成功。</p>\n<p>泪目！</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>此博客来之不易，希望以后能多写博客，好好珍惜。</p>\n","categories":["Geek"],"tags":["博客"]},{"title":"reference in c++ and c#","url":"/post/8a2f0ada.html","content":"<p>浅谈一下C#与C++中引用的区别</p>\n<span id=\"more\"></span>\n\n<p>C# 中有两种类型：引用类型和值类型。  引用类型的变量存储对其数据（对象）的引用，而值类型的变量直接包含其数据。 对于引用类型，两种变量可引用同一对象；因此，对一个变量执行的操作会影响另一个变量所引用的对象。 对于值类型，每个变量都具有其自己的数据副本，对一个变量执行的操作不会影响另一个变量（in、ref 和 out 参数变量除外——</p>\n<p><code>in</code> 关键字会导致按引用传递参数，但确保未修改参数。 它让形参成为实参的别名，这必须是变量。 换而言之，对形参执行的任何操作都是对实参执行的。 它类似于 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/ref\">ref</a> 或 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/out-parameter-modifier\">out</a> 关键字，不同之处在于 <code>in</code> 参数无法通过调用的方法进行修改。 <code>out</code> 参数必须由调用的方法进行修改，这些修改在调用上下文中是可观察的，而 <code>ref</code> 参数是可以修改的， 同时<code>ref</code> 要求在传递之前初始化变量。）</p>\n<h2 id=\"按值传递引用类型\"><a href=\"#按值传递引用类型\" class=\"headerlink\" title=\"按值传递引用类型\"></a>按值传递引用类型</h2><p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/reference-types\">引用类型</a>的变量不直接包含其数据；它包含对其数据的引用。 如果按值传递引用类型参数，则<strong>可能更改属于所引用对象的数据</strong>，例如类成员的值。 但是，<strong>不能更改引用本身的值</strong>；例如，不能使用相同引用为新对象分配内存，并将其保留在方法外部。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">PassingRefByVal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Change</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] pArray</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pArray[<span class=\"number\">0</span>] = <span class=\"number\">888</span>;  <span class=\"comment\">// This change affects the original element.</span></span><br><span class=\"line\">        pArray = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">5</span>] &#123;<span class=\"number\">-3</span>, <span class=\"number\">-1</span>, <span class=\"number\">-2</span>, <span class=\"number\">-3</span>, <span class=\"number\">-4</span>&#125;;   <span class=\"comment\">// This change is local.</span></span><br><span class=\"line\">        System.Console.WriteLine(<span class=\"string\">&quot;Inside the method, the first element is: &#123;0&#125;&quot;</span>, pArray[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        System.Console.WriteLine(<span class=\"string\">&quot;Inside Main, before calling the method, the first element is: &#123;0&#125;&quot;</span>, arr [<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        Change(arr);</span><br><span class=\"line\">        System.Console.WriteLine(<span class=\"string\">&quot;Inside Main, after calling the method, the first element is: &#123;0&#125;&quot;</span>, arr [<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* Output:</span></span><br><span class=\"line\"><span class=\"comment\">    Inside Main, before calling the method, the first element is: 1</span></span><br><span class=\"line\"><span class=\"comment\">    Inside the method, the first element is: -3</span></span><br><span class=\"line\"><span class=\"comment\">    Inside Main, after calling the method, the first element is: 888</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>在C++中，结果如下：</p>\n<p>如图：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">changeArray</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt; a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;a[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    a[<span class=\"number\">0</span>] = <span class=\"number\">999</span>;</span><br><span class=\"line\">    a = vector&lt;<span class=\"type\">int</span>&gt;&#123; <span class=\"number\">-1</span>,<span class=\"number\">23</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">    std::cout &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; a&#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span> &#125;;</span><br><span class=\"line\">    std::cout &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">changeArray</span>(a);</span><br><span class=\"line\">    std::cout &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">-1</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>可以看出C#自动传递引用类型，只不过按照值传递；而C++则是调用复制构造函数，直接产生一个新的数组，对函数外没有影响。</p>\n<h2 id=\"按引用传递引用类型\"><a href=\"#按引用传递引用类型\" class=\"headerlink\" title=\"按引用传递引用类型\"></a>按引用传递引用类型</h2><p>除了 <code>ref</code> 关键字添加到方法标头和调用，以下示例与上述示例相同。 方法中所作的任何更改都会影响调用程序中的原始变量。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">PassingRefByRef</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Change</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"built_in\">int</span>[] pArray</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Both of the following changes will affect the original variables:</span></span><br><span class=\"line\">        pArray[<span class=\"number\">0</span>] = <span class=\"number\">888</span>;</span><br><span class=\"line\">        pArray = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">5</span>] &#123;<span class=\"number\">-3</span>, <span class=\"number\">-1</span>, <span class=\"number\">-2</span>, <span class=\"number\">-3</span>, <span class=\"number\">-4</span>&#125;;</span><br><span class=\"line\">        System.Console.WriteLine(<span class=\"string\">&quot;Inside the method, the first element is: &#123;0&#125;&quot;</span>, pArray[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        System.Console.WriteLine(<span class=\"string\">&quot;Inside Main, before calling the method, the first element is: &#123;0&#125;&quot;</span>, arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        Change(<span class=\"keyword\">ref</span> arr);</span><br><span class=\"line\">        System.Console.WriteLine(<span class=\"string\">&quot;Inside Main, after calling the method, the first element is: &#123;0&#125;&quot;</span>, arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* Output:</span></span><br><span class=\"line\"><span class=\"comment\">    Inside Main, before calling the method, the first element is: 1</span></span><br><span class=\"line\"><span class=\"comment\">    Inside the method, the first element is: -3</span></span><br><span class=\"line\"><span class=\"comment\">    Inside Main, after calling the method, the first element is: -3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>C++如下：（在上面C++的代码中加了一个&amp;）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">changeArray</span><span class=\"params\">(std::vector&lt;<span class=\"type\">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;a[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    a[<span class=\"number\">0</span>] = <span class=\"number\">999</span>;</span><br><span class=\"line\">    a = vector&lt;<span class=\"type\">int</span>&gt;&#123; <span class=\"number\">-1</span>,<span class=\"number\">23</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">    std::cout &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; a&#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span> &#125;;</span><br><span class=\"line\">    std::cout &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">changeArray</span>(a);</span><br><span class=\"line\">    std::cout &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">-1</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>C++ 应该是没有值类型和引用类型的说法的（或者说不存在与 C# 的引用类型和值类型相对应的概念）。但是 C++ 类型的行为默认是 C# 中值类型的行为。</p>\n<p>比如函数传递参数时，C++ 和 C# 的值类型都会把参数完整复制一份。C++ 往往用传递 const 引用的方式来省去复制的开销。而 C# 可以用 ref 关键词来传递值类型的引用。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>上述只是简单描述了其区别，但对原理尚未搞清楚，希望等到对引用了解深入以及进一步学习后再来看C++与C#的区别。</p>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters\">https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/ref\">https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/ref</a></p>\n<p><a href=\"https://uint128.com/2021/05/08/C-%E5%92%8CC-%E7%9A%84%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/\">https://uint128.com/2021/05/08/C-%E5%92%8CC-%E7%9A%84%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</a></p>\n","categories":["Geek"],"tags":["技术","Developer","C++","C#","Programming"]},{"title":"明日、我会成为谁的女友-观后感","url":"/post/663a0935.html","content":"<p>现在，在这个东京，仅是一个人想要生存下去，就需要很大的开销了，无论是优越的环境，还是强大的意志，要是缺少其中一样，就会连普通的生活都无法维持下去，这就是现实。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>在这个充满束缚的世界里，为了尽可能活着，活下去，我要用自己的脚一步一步走下去。所以，今天，我也会是某人的女友。</p>\n<p>彼时的东京，恰如此时的xx，都是一个这样的地方：<strong>金钱流通无息稍停，欲望增长尽日奔驰</strong>。</p>\n<p>之前看过一本关于东京女性纪实的书，大体上有这样的概念，即很多在东京的女性，尤其以年轻女性为主，都在try theirs’s best to make ends meet. 在这种情况下，不能完全说风俗店或者出租女友的服务完全不合理，它终究是有个原因，是一整个社会共同造成的。在这样的情况下，女性究竟是何种命运，是什么造就了这种情况，它将如何发展下去，似乎要再次回到更加广阔的历史生物与哲学背景中。</p>\n<p>但我自然没有如此之水平，再加上我是男性的身份，就决定了我既是法官，又是当事人，也就难以客观，值得怀疑。</p>\n<p>但值得瞩目的事情在于讨论区的女性朋友们大多将重点放在了感情线与杀猪盘上，并未想要去考虑在背后与整个日本经济社会政治方面的联想，我也无法有效联想，因为知识太浅，但个人确实比较喜欢这种讲两性的剧并作出联想。</p>\n<h2 id=\"情节\"><a href=\"#情节\" class=\"headerlink\" title=\"情节\"></a>情节</h2><p>对于整体的分析比较困难，还是拿几个情节来讲吧。</p>\n<h3 id=\"雪\"><a href=\"#雪\" class=\"headerlink\" title=\"雪\"></a>雪</h3><p>第一个在于不同人对于小雪伤疤的态度，几乎所有人都带有略带怜悯的眼光去同情她，但实际上可能这种人最希望追求的是normal，不是别人特殊的眼光，特殊的照顾，而是正常看待的眼光。这种情况下，一直坚持整容变美的彩反而作出了雪最想要的反应：正常看待，觉得有问题就解决，解决时候还要注意很多东西。而另两个，一个爱情一个友情，都没有作出这种选择，而是投以怜悯的目光，或许也是身未受故感不同吧。之前觉得彩执着于整容有些过头，然而却也是自己的选择，这种情况下，你很难去以一件事情就去对一个人作出自己对他的盖棺定论，事情不断变化，人也在不断发展，我们的认识也要不断变化，这才是实事求是。</p>\n<p>在剧中最理性的好像是雪，没有不良嗜好，行为也都有界限。所有的一切都是为了生活本身，而且对于未来也有一个比较清晰的规划。不得不说其原生家庭也不容易，<strong>并不是生了孩子就能变成母亲</strong>。</p>\n<h3 id=\"萌\"><a href=\"#萌\" class=\"headerlink\" title=\"萌\"></a>萌</h3><p>第二个是沉沦的萌，她的沉沦与前面对爱情的冷漠表面矛盾对立，然则好像一体两面一样，是完全统一的。就好像弹簧一般，前期由于自己外貌与身材，加上身边人的评价，她也只能无奈接受这种设定，暂时把对于一些东西的渴望隐藏起来，但它们并没有消失。当一旦遇到某一个愿意正常待他时，她的反应只会更加剧烈，其热烈程度反而会让自己深度沉迷，最终导致受伤。正如其心中所想：“大家都在看着我，这用金钱编织的关系，这充满谎言的世界，但是，在这个世界中，我像主人公一样。”幸好最后即时发现止损。</p>\n<p>一开始萌与枫之间就只是顾客与服务者的关系，因为有这样的一个恶性循环：萌想要多见枫，但她好像只能通过投入大量金钱与其他女性竞争来达到与枫的短暂见面机会，这样的金钱又迫使着萌去发展其他业务，使自己更加空虚后，又会继续到枫身上寻找依赖与慰藉。然而如果两个人真的情投意合好似天公作美的一对，那么第一步只能通过金钱的途径就会无效，枫自然会不断找时间与萌见面，恶性循环也就无从谈起。</p>\n<p>一开始好像都很清醒，都知道只是逢场作戏，然而人心不足蛇吞象，欲望会不断增长的。见一面后就想着见两面，散步一小时后就想着吃饭两小时，最后所有的时间都换算成了高昂的价钱。</p>\n<h2 id=\"劳动、产业、起源\"><a href=\"#劳动、产业、起源\" class=\"headerlink\" title=\"劳动、产业、起源\"></a>劳动、产业、起源</h2><p>剧中的五个人的共同点在于都选择了以自己的身体作为生产资料去进行售卖身体的活劳动，一定程度上是女性占比多一些。牛郎也有，但我潜在意识中还是会觉得女性多一些，因为产业发达程度与受众数量也就是用户多少有关。在这种情况下，当女性是为了一些目标去从事这种活动时，或者只是为了make ends meet，并不会去觉得有什么不妥。因为她们也是劳动者，比起某些利用权力去为虎作伥的人来说好太多了。但这种劳动的可怕之处，在于它的易沉迷性。不管思想上多么受折磨，这样如此的高薪仍然是少有的领域，即使是互联网也难以抗衡（对于普遍人来说）（当然这里的高薪我们必须要提到关于色情行业的产业升级，无论什么行业产业链的下游都是困难的，高薪是说那些在新时代中改变营业方式吸取客人的店）在这样的高薪后面，即使有相对难缠的客人，但拿到手里的货币的重量仍然不容小觑。所以我想说的论点在于：投入产出比很高。正如那句话所说，拼命的努力是为了让成功到来时能够心安理得。与之意思相近的一点是权力要与胸怀匹配，否则会给自己和下属都带来灾难。</p>\n<p>同样的，这种行业也会带来这样的不平衡。而且这样的劳动基本完全脱离成果。来钱过快过容易必然导致跨过思想层面的门槛变得极度容易，后续也会轻而易举地进入正反馈中：赚钱-&gt;大手花钱+因劳动脱离成果产生空虚-&gt;继续花钱-&gt;钱不够-&gt;继续赚钱。</p>\n<p>劳动脱离成果后，因为没有成果的反馈，消费便十分容易地脱离掉需要，只能通过大手的花钱来证明自己的价值，不断强化自己有价值的观点，等到习惯了大手花钱后，也就只能与快速赚钱的行业相绑定了。</p>\n<p>此时又不得不搬出那句话了：“男人的极大幸运在于，他，不论在成年还是在小时候，必须踏上一条极为艰苦的道路，不过这又是一条最可靠的道路；女人的不幸则在于被几乎不可抗拒的诱惑包围着；每一种事物都在诱使她走容易走的道路；她不是被要求奋发向上，走自己的路，而是听说只要滑下去，就可以到达极乐的天堂。当她发觉自己被海市蜃楼愚弄时，已经为时太晚，她的力量在失败的冒险中已被耗尽。”</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>然而不得不提的一点在于，这并不是相当一部分女性的初心，这种情况下，很多问题都可以通过稳健到位的社会保障机制，及时高效合理的司法，有职业道德的教育工作者这三样东西去解决。日本高昂的大学贷款逼着年轻女性拼命地用尽一切方法维持生计，这并不是这部分女性的错。</p>\n<p>这是谁的错呢？</p>\n<p>或者更重要的一点，如何解决呢？</p>\n<p>I don’t know both.</p>\n","categories":["观影"],"tags":["电视剧","日剧","观后感","女性"]},{"title":"阿尔卑斯山求生记","url":"/post/13a30ca8.html","content":"<h2 id=\"生命史诗与自然之魂！\"><a href=\"#生命史诗与自然之魂！\" class=\"headerlink\" title=\"生命史诗与自然之魂！\"></a>生命史诗与自然之魂！</h2><hr>\n<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><p><strong>天地有大美而不言</strong></p>\n<p><strong>四时有明法而不议</strong></p>\n<p><strong>万物有成理而不说</strong></p>\n<p>人类会犯错，自然不会犯错 </p>\n<p>被震撼的一次观影</p>\n<hr>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>头狼为了自己的威信，向熊发起挑战</p>\n<p>虽然最后伤病而死，但他难道输了吗？</p>\n<p>若是，那么对于生命的赢又是什么？</p>\n<p>动物也并非没有愿意用生命去捍卫的东西</p>\n<p>雌性头狼离开狼群陪伴伴侣，谁说殉情只是古老的传说？</p>\n<p>原有的狼群迅速选择新首领，谁又能说他们错了？</p>\n<p>没有首领必然意味着群体的灭亡</p>\n<p>自然不会错，只是我们难以理解</p>\n<p>雌性头狼最终离开已经死去的头狼，是不敢殉情吗？</p>\n<p>——她还怀着孩子</p>\n<p>有时候生，并非意味着幸福</p>\n<p>六甲之躯，跨越群山</p>\n<p>共计公里万余三</p>\n<p>只身孤影，克服万难</p>\n<p>没有丰富的面部表情，不意味着没有感情</p>\n<p>没有语言，不意味着没有想法</p>\n<p>在如此情况下，六只狼崽全部存活</p>\n<p>母性伟大之光辉震烁千古！</p>\n<p>我又想起了那些把孩子生在厕所里的母亲</p>\n<p>有时候精神的高尚</p>\n<p><strong>不会随着直立行走而更加高大</strong></p>\n<p><strong>亦不会随着身姿的匍匐而变得卑微</strong></p>\n<p>刚生下狼崽，碰见猞猁</p>\n<p>有些讨厌，人家刚生下孩子，你对人家幼崽虎视眈眈</p>\n<p>就不能找点别的吃的吗</p>\n<p>后来</p>\n<p>原来她也是母亲</p>\n<p>愚昧如我</p>\n<p>自然没有对错，亦无好坏</p>\n<p>走投无路的狼妈妈，将眼光看向了羊群 </p>\n<p>若是生活没有如此艰难，谁愿意铤而走险？？</p>\n<p>可生活就是这样，自前世而固然</p>\n<p>高山环境恶劣 </p>\n<p>导致残酷的竞争</p>\n<p>可是却也恰恰因为恶劣的环境</p>\n<p>合作显得尤为重要</p>\n<p>视频结尾有一段话结束</p>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><p>在最艰难的条件下，能够生存下来的不是最强者，而是互相帮助的个体</p>\n<p>环境越恶劣，团结协作的重要性就越发凸显</p>\n<p>这就是我们从阿尔卑斯山的生物上学到的品质</p>\n<p>在这里生活，他们都知道这一点：</p>\n<p>雌性羱羊守望相助，一起照顾后代</p>\n<p>鸟类聚集一起寻找食物</p>\n<p>鹿紧紧挤在一起取暖</p>\n<p>树木为老祖宗提供养分</p>\n<p>狼为了守护族群不惜牺牲一切</p>\n<p>瑞士松依靠星鸦把种子洒满山野</p>\n<p>狼需要克服无数挑战才能与其他狼和平共处</p>\n<p>人类需要依靠驯养的犬来守卫家畜</p>\n<p>所有生物都知道自己不是最强大的</p>\n<p>大山本身都比他们强大的多</p>\n<p>所以他们才会这样相互依存</p>\n<p>或许这就是自然吧：</p>\n<p>它的魅力让我抓心挠肝，</p>\n<p>它的美丽让我惊心动魄，</p>\n<p>它的威严让我顶礼膜拜，</p>\n<p>它的慈祥让我泪水常噙。</p>\n<p>自然不会错</p>\n","categories":["观影"],"tags":["观后感","纪录片"]},{"title":"一些对于博客的归纳","url":"/post/1a07e293.html","content":"<p>本人很喜欢写东西，无论是道听途说，还是捕风捉影，抑或是经典小作文，我都想要用文字记录下来，上大学以来在OneNote上记录的也不少了。</p>\n<span id=\"more\"></span>\n\n<p>一个博客，应该是能够体现我这些想法的，而不仅仅只用来存放技术类的知识（个人想法）。</p>\n<p>然而博客维护起来相对还是比较麻烦的，一是要面对其他人而不是自己，遣词造句上需要再三斟酌；二来毕竟要放在一个公开的互联网上，dddd。</p>\n<p>于是即使有三位数的博文，却出现了这样的一个尴尬局面：</p>\n<p><strong>想写的东西不能写，</strong></p>\n<p><strong>能写的东西不想写。</strong></p>\n<p>希望能尽量多的发布一些想写又能写的东西吧。</p>\n","categories":["IDEA"],"tags":["博客","总结"]},{"title":"the-second-sex","url":"/post/bf968ce7.html","content":"<h1 id=\"第二性摘录\"><a href=\"#第二性摘录\" class=\"headerlink\" title=\"第二性摘录\"></a>第二性摘录</h1><ol>\n<li>“女性是第二性，排除在男性以外的“他者”。权力归于男性，女性仅仅是附庸。附庸的庇护来自权力，歧视也来自于权力。事实就是如此，谁家生了女儿也还是叹惋一阵儿。连在性交中，女性都是处于被动和守势，像个容器，收纳男性的欲望。”</li>\n<li>“夫妻是这样一个共同体，它的成员失去了独立性却不能够摆脱孤独；他们是一种静态的结合，是“同一个人”，而不是在维持一种动态的、充满活力的关系。”</li>\n<li>“但情况依然是，女人打扮得越漂亮，她就越受到尊重；她越是需要工作，绝佳的外貌对她就越是有利；姣好容貌是一种武器，一面旗帜，一种防御，一封推荐信。”</li>\n<li>“人们常说，女人打扮是为了引起别的女人的嫉妒，而这种嫉妒实际上是成功的明显标志；但这并不是唯一的目的。通过被人嫉妒、羡慕或赞赏，她想得到的是对她的美、她的典雅、她的情趣——对她自己的绝对肯定；她为了实现自己而展示自己。”</li>\n<li>“服饰对许多女人之所以如此重要，是因为它们可以使女人凭借幻觉，同时重塑外部世界和她们的内在自我。”</li>\n<li>“肖伯纳说，让人们受到束缚比让他们摆脱这种束缚更容易，只要这种束缚会带来利益。”</li>\n<li>“打扮不仅仅是修饰，它还表明了女人的社会处境。”</li>\n<li>“想想也真可悲，”米什莱写道，“女人，这个相对的人，只能作为夫妻中的一员来生活，她往往比男人孤独。他广交朋友，不断有新的接触。她若无家庭则什么也不是。而家庭是一种摧残人的负担；它的全部重量都压在她的肩上。”</li>\n<li>“ 一种没有雄心也没有激情的金光闪闪的平庸，漫无目的，无限地周而复始的日子，缓缓地滑向死亡，不寻思原因的生活。原封不动地保存和重复世界，看来既不可取，也不可能。”</li>\n<li>“女人不是天生的，而是造就的。”</li>\n<li>“人们将女人关闭在厨房里或者闺房内，却惊奇于她的视野有限；人们折断了她的翅膀，却哀叹她不会飞翔。但愿人们给她开放未来，她就再也不会被迫待在目前。”</li>\n<li>“一个人不是生下来就是女人，她是变成女人的。”</li>\n<li>“男人的极大幸运在于，他，不论在成年还是在小时候，必须踏上一条极为艰苦的道路，不过这又是一条最可靠的道路；女人的不幸则在于被几乎不可抗拒的诱惑包围着；每一种事物都在诱使她走容易走的道路；她不是被要求奋发向上，走自己的路，而是听说只要滑下去，就可以到达极乐的天堂。当她发觉自己被海市蜃楼愚弄时，已经为时太晚，她的力量在失败的冒险中已被耗尽。”</li>\n<li>“如果女人只是一个消极的实体，男人所支配的不过虚无而已。他自以为他正在攫取使他丰富的东西，实际上那只是幻念。”</li>\n<li>“真正的价值并不源于外在的事物，而是源于人心。”</li>\n<li>“司汤达：妇女解放不只泛泛地打起自由的旗号，还要凭着个人幸福的名义。爱情决不会丧失什么东西，相反，当女人与男人平等之时，她越是能完全理解他，爱情便越是真诚。”</li>\n<li>“几乎没有什么工作能比永远重复的家务劳动更像西绪弗斯所受的折磨了：干净的东西变脏，脏的东西又被搞干净，周而复始，日复一日。家庭主妇在原地踏步中消耗自己：她没有任何进展，永远只是在维持现状。她永远不会感到在夺取积极的善，宁可说是在与消极的恶做无休止的斗争。”</li>\n<li>“然而事实上，当两个人一方面彼此憎恶，另一方面又必须相依为命时，这种关系并不是人类一切关系中最真诚、最动人的，宁可说是最可怜的。”</li>\n<li>“爱是一种外向的活动，一种指向另一个人、指向与自己相分离并明显有别于自己的存在、指向可以见到的终点——未来的冲动。”</li>\n<li>“婚姻的悲剧性并不在于它无法保障向女人许诺过的幸福（保障幸福这种事本来就不存在），而在于它摧残了她；它使她注定要过着周而复始的千篇一律的生活。”</li>\n</ol>\n","categories":["Reader"],"tags":["女性","波伏娃","阅读"]},{"title":"中国智慧与当代社会","url":"/post/2454a085.html","content":"<h3 id=\"人民有信仰，国家有力量，民族有希望\"><a href=\"#人民有信仰，国家有力量，民族有希望\" class=\"headerlink\" title=\"人民有信仰，国家有力量，民族有希望\"></a>人民有信仰，国家有力量，民族有希望</h3><p>层层递进的关系</p>\n<h4 id=\"民族的信仰在哪里？\"><a href=\"#民族的信仰在哪里？\" class=\"headerlink\" title=\"民族的信仰在哪里？\"></a>民族的信仰在哪里？</h4><p>信仰：</p>\n<ol>\n<li>对生命价值的确认 </li>\n<li>对人生意义的领会</li>\n</ol>\n<p>87年的深圳标语：时间就是金钱，效率就是生命，回答的正是这个问题。不可否认的是在当时，这两句话起到了积极的作用，但不能长久支持中华民族。</p>\n<p>疫情让我们飞速发展的社会停下来，我们应该要思考改革开放几十年后所缺少的东西：</p>\n<ol>\n<li>敬重天道</li>\n<li>敬畏人性</li>\n</ol>\n<p>中华民族有文化生命，诗经言：周虽旧邦，其命维新</p>\n<p>科学给我们知识，但不等于智慧。在科学中不意味着在思想中。</p>\n<p><strong>应无所住，而生其心。</strong></p>\n<p>住：住相。相：世界上所有的事物与人都区分出高低贵贱。Eg.钻石与普通石头</p>\n<p>高低贵贱并不是自然物本身的属性，人为区分。</p>\n<p>相是客观的，有人类社会就有相。</p>\n<p>不执著于相，显现本心。</p>\n<p>教科书中是知识与对知识的论证。</p>\n<p>​\t\t当代人无法生出智慧，因为我们所生存的当代文明，已经高度复杂化，充满了知识与机巧，这种人离开智慧最为遥远。在朴素文明中生活的人，才有可能俯仰天地，领会天人之际。我们的智慧只能是对古代智慧的解读。</p>\n<p>​\t\t西汉初年为道家思想，无为而治。但无法长久，因为道家的学说无法为任何一个民族，为他的社会秩序，奠定一个精神基础。才有的罢黜百家，独尊儒术。中国的道统是儒家。</p>\n<p>今天的中国人，从根本上来看，其对生命价值的确认，还是源于儒家。</p>\n<p>儒家让我们站在大地上，这个大地就是<strong>亲情和亲情传递给我们的牵挂和责任</strong>。</p>\n<p>无论如何学西方，根本上还是儒家。</p>\n<p><strong>儒道互补</strong>：儒家讲原则、理想、社会的伦理精神</p>\n<p>道家讲<strong>权变</strong></p>\n<p>原则性与灵活性的高度统一</p>\n<p>灵活性过头，导致以权变经，便会产生奸猾的人生态度。</p>\n<p>菠萝，三昧均是音译，中国文化中没有对应的思想，也就没有对应的汉字。</p>\n<p>唐朝佛学中国化，才有了众多的词语。</p>\n<p>儒家讲性理（人性），道家讲玄理，佛家讲空里。</p>\n<p>玄理：房间的四周墙壁的有，都是为了中间的无。有和无之间的关系。</p>\n<p>玄之又玄，众妙之门。</p>\n<p>​\t\t人的生命对自身就是问题。人心的安顿，（对无限的一面，需要安顿）有限的一面是对周遭事物的经验与知识，因为其对象便是有限的。</p>\n<p>筹划未来落空了，也就是有了烦恼。</p>\n<p>​\t\t大多数人在绝大多数时间同时具备着温饱，安全与健康，但我们仍然是烦恼不断。此之为<strong>无限心</strong>。</p>\n<p>不仁者，不可以久处约，不可以长处乐。</p>\n<p>（约：节约，贫贱的生活处境，不仁者：心没安顿好）</p>\n<p>不仁者，贫贱难耐凄凉，富贵不能乐业。</p>\n<p>无论你买的多豪华的东西，都是暂时的为你使用。<strong>无限的心又如何安顿在有限的事物中</strong></p>\n<p>安顿心，只能两种方法：<strong>宗教与哲学</strong></p>\n<p><strong>儒：无所为而为</strong>。做事并不是为了达成某个目标的途径与手段，事情自己就是自己的价值与意义，而不是其他任何事情。因此没有失败的人生——任何事情都不是为了其他事情的手段与途径。</p>\n<p><strong>道：无为而无不为</strong>。人+为&#x3D;伪(造作) 减少做事时人为的因素。</p>\n<p>生非贵之所能存，身非爱之所能厚；</p>\n<p>生亦非贱之所能夭，身亦非轻之所能薄。</p>\n<p>饮食：已饥方食，未饱先止。</p>\n<p>伟大的哲学典籍，只需要懂几句话便可以终身受用（上善若水）</p>\n<p><strong>佛：无心而为</strong>。做事是为了消业，希望没有结果才好。</p>\n","categories":["IDEA"],"tags":["哲学","人文情怀"]}]